# Minecraft Server Using Docker Compose

# Change variables in the `.env` to meet your requirements.
# Note that the `.env` file and `plugins` folder should be in the same directory as `docker-compose.yml`.

# Create a network for your services before deploying the configuration using the command
# docker network create minecraft-network

# Deploy Minecraft Server using Docker Compose
# docker compose -f docker-compose.yml -p minecraft up -d

# You can check the Minecraft Server status using the commands:
# ```
# MINECRAFT_SERVER_CONTAINER=$(docker ps -aqf "name=minecraft-server-minecraft-server") \
# && docker exec -it $MINECRAFT_SERVER_CONTAINER mc-monitor status
# ```

# # Minecraft Servers Logs
# You can check logs using the commands:
# ```
# MINECRAFT_SERVER_CONTAINER=$(docker ps -aqf "name=minecraft-server-minecraft-server") \
# && docker logs $MINECRAFT_SERVER_CONTAINER
# ```

# # Minecraft Server Management
# Apply new configuration after a change in the `docker-compose.yml` or `.env` using the command:
# `docker compose -f docker-compose.yml -p minecraft up -d`

# Connect to the Minecraft server command-line interface using the command:
# ```
# MINECRAFT_SERVER_CONTAINER=$(docker ps -aqf "name=minecraft-server-minecraft-server") \
# && docker exec -i $MINECRAFT_SERVER_CONTAINER rcon-cli
# ```

# # Backups
# The `backups` container in the configuration ensures a consistent backup routine for the Minecraft server. Here's a detailed breakdown:

# - **Connection to Minecraft Server**: 
#   - The container communicates with the main Minecraft server through RCON (Remote Console) for server management. 
#   - Specified by: `RCON_HOST`

# - **Backup Schedule**: 
#   - Determines the frequency of backups.
#   - Specified by: `BACKUP_INTERVAL`

# - **Backup Pruning**: 
#   - Older backups are removed periodically to manage storage space.
#   - Specified by: `PRUNE_BACKUPS_DAYS`

# - **Initial Delay**: 
#   - The container waits for a defined time before starting the backup routine.
#   - Specified by: `INITIAL_DELAY`

# - **Backup Storage**: 
#   - Defines the source of server data and backup storage location.
#   - Backup location: `MINECRAFT_SERVER_BACKUPS_PATH`

# # Restore (Init Container)
# The `restore` container, described as an "init" container, serves a unique role:

# - **Functionality**: 
#   - Mainly restores the data volume if found empty.
  
# - **Entry Point**: 
#   - Specifies the primary action upon container startup.
#   - Defined by: `entrypoint` (default: `restore-tar-backup`).

# - **Data Restoration**: 
#   - Has access to the server data and backups for restoration purposes.
#   - Backups source: `MINECRAFT_SERVER_BACKUPS_PATH`

# By integrating this Docker Compose setup, it not only ensures consistent backups of the Minecraft server data but also offers efficient data restoration when needed.
# Flexible configuration options provide tailored backup routines catering to specific requirements, thereby guaranteeing data integrity and availability.

version: '3.9'

services:
  minecraft:
    container_name: minecraft
    image: ${MINECRAFT_SERVER_IMAGE_TAG}
    stdin_open: true
    environment:
      - EULA=${MINECRAFT_SERVER_EULA}
      - TYPE=${MINECRAFT_SERVER_TYPE}
      - VERSION=${MINECRAFT_SERVER_VERSION}
      - MEMORY=${MINECRAFT_SERVER_MEMORY}
      - SERVER_NAME=${MINECRAFT_SERVER_SERVER_NAME}
      - MOTD=${MINECRAFT_SERVER_MOTD}
      - LEVEL_TYPE=${MINECRAFT_SERVER_LEVEL_TYPE}
      - LEVEL=${MINECRAFT_SERVER_LEVEL}
      - MODE=${MINECRAFT_SERVER_MODE}
      - FORCE_GAMEMODE=${MINECRAFT_SERVER_FORCE_GAMEMODE}
      - DIFFICULTY=${MINECRAFT_SERVER_DIFFICULTY}
      - HARDCORE=${MINECRAFT_SERVER_HARDCORE}
      - ANNOUNCE_PLAYER_ACHIEVEMENTS=${MINECRAFT_SERVER_ANNOUNCE_PLAYER_ACHIEVEMENTS}
      - MAX_PLAYERS=${MINECRAFT_SERVER_MAX_PLAYERS}
      - PVP=${MINECRAFT_SERVER_PVP}
      - ENABLE_RCON=${MINECRAFT_SERVER_ENABLE_RCON}
      - RCON_PASSWORD=${MINECRAFT_SERVER_RCON_PASSWORD}
      - RCON_PORT=${MINECRAFT_SERVER_RCON_PORT}
      - SERVER_PORT=${MINECRAFT_SERVER_SERVER_PORT}
      - ALLOW_FLIGHT=${MINECRAFT_SERVER_ALLOW_FLIGHT}
      - MAX_WORLD_SIZE=${MINECRAFT_SERVER_MAX_WORLD_SIZE}
      - MAX_BUILD_HEIGHT=${MINECRAFT_SERVER_MAX_BUILD_HEIGHT}
      - SPAWN_ANIMALS=${MINECRAFT_SERVER_SPAWN_ANIMALS}
      - SPAWN_MONSTERS=${MINECRAFT_SERVER_SPAWN_MONSTERS}
      - SPAWN_NPCS=${MINECRAFT_SERVER_SPAWN_NPCS}
      - SPAWN_PROTECTION=${MINECRAFT_SERVER_SPAWN_PROTECTION}
      - VIEW_DISTANCE=${MINECRAFT_SERVER_VIEW_DISTANCE}
      - ONLINE_MODE=${MINECRAFT_SERVER_ONLINE_MODE}
      - SNOOPER_ENABLED=${MINECRAFT_SERVER_SNOOPER_ENABLED}
      - ENABLE_COMMAND_BLOCK=${MINECRAFT_SERVER_ENABLE_COMMAND_BLOCK}
      - WHITELIST=${MINECRAFT_SERVER_WHITELIST}
      - OPS=${MINECRAFT_SERVER_OPS}
      - TZ=${MINECRAFT_SERVER_SERVER_TIMEZONE}
    ports:
      - ${MINECRAFT_SERVER_SERVER_PORT}:${MINECRAFT_SERVER_SERVER_PORT}
    volumes:
      - minecraft-server-data:${DATA_PATH}
      - ./plugins:/plugins:ro
    networks:
      - minecraft-network
    restart: unless-stopped

  backups:
    container_name: minecraft-backup
    image: ${MINECRAFT_SERVER_BACKUP_IMAGE_TAG}
    environment:
      - RCON_HOST=minecraft-server
      - RCON_PORT=${MINECRAFT_SERVER_RCON_PORT}
      - RCON_PASSWORD=${MINECRAFT_SERVER_RCON_PASSWORD}
      - SERVER_PORT=${MINECRAFT_SERVER_SERVER_PORT}
      - SRC_DIR=${DATA_PATH}
      - BACKUP_METHOD=${BACKUP_METHOD}
      - BACKUP_INTERVAL=${MINECRAFT_SERVER_BACKUP_INTERVAL}
      - PRUNE_BACKUPS_DAYS=${MINECRAFT_SERVER_PRUNE_BACKUPS_DAYS}
      - INITIAL_DELAY=${MINECRAFT_SERVER_INITIAL_DELAY}
      - TZ=${MINECRAFT_SERVER_SERVER_TIMEZONE}
    volumes:
      - minecraft-server-data:${DATA_PATH}:ro
      - minecraft-server-data-backups:${MINECRAFT_SERVER_BACKUPS_PATH}
    networks:
      - minecraft-network
    restart: unless-stopped
    depends_on:
      minecraft:
        condition: service_healthy

  minecraft-restore:
    container_name: minecraft-restore
    image: ${MINECRAFT_SERVER_BACKUP_IMAGE_TAG}
    volumes:
      - minecraft-server-data:${DATA_PATH}
      - minecraft-server-data-backups:${MINECRAFT_SERVER_BACKUPS_PATH}:ro
    networks:
      - minecraft-network
    restart: "no"
    depends_on:
      minecraft:
        condition: service_healthy

volumes:
  minecraft-server-data:
  minecraft-server-data-backups:

networks:
  minecraft-network:
    external:
      name: minecraft-network